#!/usr/bin/env python3
"""
Split an Aseprite file into several png
"""
import argparse
import sys

from pathlib import Path

from PIL import Image

from aseprite import AsepriteImage
from imageops import pil_image_for_cel, render_frame


def trim(image: Image) -> Image:
    box = image.getbbox()
    return image.crop(box)


def main():
    parser = argparse.ArgumentParser()
    parser.description = __doc__

    parser.add_argument("ase_file")
    parser.add_argument("--format")
    parser.add_argument("--split-layers", action="store_true")
    parser.add_argument("--split-slices", action="store_true")
    parser.add_argument("--trim", action="store_true")
    parser.add_argument("--dry-run", action="store_true")

    args = parser.parse_args()

    ase_file = Path(args.ase_file)

    title = ase_file.stem
    ase_image = AsepriteImage(ase_file)

    def finish_image(image, context, **extra_context_args):
        if args.trim:
            image = trim(image)

        ctx = dict(context)
        ctx.update(extra_context_args)
        path = args.format.format(**ctx)
        if args.dry_run:
            print(f"Would create {path}")
        else:
            print(f"Creating {path}")
            image.save(path)

    for frame_idx, frame in enumerate(ase_image.frames):
        context = dict(frame=frame_idx, title=title)
        if args.split_layers:
            for layer_idx, layer in enumerate(ase_image.layers):
                image = pil_image_for_cel(frame.cels[layer_idx])
                finish_image(image, context, layer=layer.name)
        else:
            image = render_frame(frame)
            if args.split_slices:
                for slice_ in ase_image.slices:
                    x, y = slice_.position
                    w, h = slice_.size
                    box = [x, y, (x + w), (y + h)]
                    sliced_image = image.crop(box)
                    finish_image(sliced_image, context, slice=slice_.name)
            else:
                finish_image(image, context)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
