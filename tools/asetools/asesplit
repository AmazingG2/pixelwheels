#!/usr/bin/env python3
"""
Split an Aseprite file into several png
"""
import argparse
import sys

from pathlib import Path

from PIL import Image

from aseprite import AsepriteImage
from imageops import pil_image_for_cel, render_frame


def real_save(image: Image, path: str):
    print(f"Creating {path}")
    image.save(path)


def dry_run_save(image: Image, path: str):
    print(f"Would create {path}")


def trim(image: Image) -> Image:
    box = image.getbbox()
    return image.crop(box)


def main():
    parser = argparse.ArgumentParser()
    parser.description = __doc__

    parser.add_argument("ase_file")
    parser.add_argument("--format")
    parser.add_argument("--split-layers", action="store_true")
    parser.add_argument("--trim", action="store_true")
    parser.add_argument("--dry-run", action="store_true")

    args = parser.parse_args()

    ase_file = Path(args.ase_file)

    title = ase_file.stem
    image = AsepriteImage(ase_file)

    if args.dry_run:
        save = dry_run_save
    else:
        save = real_save

    for frame_idx, frame in enumerate(image.frames):
        if args.split_layers:
            for layer_idx, layer in enumerate(image.layers):
                image = pil_image_for_cel(frame.cels[layer_idx])
                if args.trim:
                    image = trim(image)
                png_path = args.format.format(layer=layer.name, title=title, frame=frame_idx)
                save(image, png_path)
        else:
            image = render_frame(frame)
            if args.trim:
                image = trim(image)
            png_path = args.format.format(title=title, frame=frame_idx)
            save(image, png_path)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
